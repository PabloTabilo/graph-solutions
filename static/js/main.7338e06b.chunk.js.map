{"version":3,"sources":["components/Vertex.js","components/Graph.js","components/algorithms/Kruskals.js","components/data-structure/PriorityQueue.js","components/algorithms/Prims.js","components/useCanvas.js","components/MinSpaningTree.js","components/TopologicalSorting.js","App.jsx","index.js"],"names":["Vertex","id","x","y","this","connectTo","selectMe","partOfSolution","numConnections","idTo","weight","context","vertexTo","directed","partOfSolEdge","strokeStyle","lineWidth","beginPath","fromx","fromy","tox","toy","moveTo","dx","dy","angle","Math","atan2","sin","cos","lineTo","PI","stroke","font","fillStyle","textAlign","fillText","ctx","arc","fill","Graph","height_canvas","width_canvas","redraw","temporal","notRepeat","v","clearRect","width","height","nodesOn","n","length","push","parseInt","i","drawEdge","drawVertex","auto_id","numNodes","undefined","idFrom","addNeight","v_id","Comparator","a","b","Kruskals","myGraph","numComponents","solution","p","arrRoot","root","next","q","arrSize","root1","find","root2","temporalArr","u","myTuple","sort","map","Map","Object","entries","union","w","INF","PriorityQueue","capacity","heap_size","triplete","values","pm","idCount","im","Array","id0","sink","left","leftChild","right","rightChild","smallest","swap","parent","down","temp","edgeObject","t_im","cost","swim","c","e","Prims","visited","pq","mstCost","mstEdges","nodeIndex","edges","u_info","insert","from","to","s","m","edgeCount","addEdge","empty","edge","front","poll","lazyPrims","removeNodeCanvas","fromId","removeNode","dragNodeCanvas","dragMe","xPos","clientX","yPos","clientY","AddOrSelect","toId","min","max","addNode","saveIdx","minDist","dist","pow","closeVertex","addNeightNode","floor","random","getRandomInt","MinSpaningTree","canvasRef","useRef","contextRef","useEffect","current","getContext","removeGraph","animationSolve","j","res","setTimeout","onClick","preventDefault","onMouseDown","onTouchStart","onTouchMove","touches","onMouseMove","onMouseUp","onTouchEnd","className","ref","document","getElementById","value","inst","solve","TopologicalSorting","App","myWidth","window","innerWidth","exact","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7338e06b.chunk.js","sourcesContent":["\nexport class Vertex{\n    constructor(id, x, y){\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.connectTo = {};\n        this.selectMe = false;\n        this.partOfSolution = false;\n        this.numConnections = 0;\n    }\n    addNeight(idTo, weight=0){\n        this.connectTo[idTo] = weight;\n        this.numConnections++;\n    }\n    removeNeight(id){\n        delete(this.connectTo[id]);\n        this.numConnections--;\n    }\n    drawEdge(context, vertexTo, directed, weight, partOfSolEdge){\n        if(partOfSolEdge){\n            context.strokeStyle = \"orange\";\n            context.lineWidth = 5;\n        }\n        else{\n            context.lineWidth = 1;\n            context.strokeStyle = \"black\";\n        }\n        context.beginPath();\n        let fromx = this.x;\n        let fromy = this.y;\n        let tox = vertexTo.x;\n        let toy = vertexTo.y;\n        context.moveTo(fromx, fromy);\n\n        let dx = tox - this.x;\n        let dy = toy - this.y;\n        let angle = Math.atan2(dy, dx);\n\n        let pad = 20; // like radius\n        let y = toy - Math.sin(angle) * pad;\n        let x = tox - Math.cos(angle) * pad;\n\n        context.lineTo(x, y);\n        if(directed){\n            let headlen = 15; // length head pixels\n\n            context.moveTo(x, y);\n            context.lineTo(x - headlen * Math.cos(angle - Math.PI / 6), y - headlen * Math.sin(angle - Math.PI / 6));\n            context.moveTo(x, y);\n            context.lineTo(x - headlen * Math.cos(angle + Math.PI / 6), y - headlen * Math.sin(angle + Math.PI / 6));\n        }\n        context.stroke();\n        context.font = \"25px Comic Sans MS\";\n        if(partOfSolEdge){\n            context.fillStyle = \"red\";\n        }else{\n            context.fillStyle = \"gray\";\n        }\n        context.textAlign = \"center\";\n        context.fillText(weight, (fromx+tox)/2, (fromy+toy)/2);\n    }\n    drawVertex(ctx){\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, 20, 0, 2 * Math.PI);\n        if(this.selectMe){\n            ctx.fillStyle = \"orange\";\n        }else{\n            ctx.fillStyle = \"white\";\n        }\n        if(this.partOfSolution){\n            ctx.fillStyle = \"orange\";\n        }\n        ctx.fill();\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"black\";\n        ctx.stroke();\n        ctx.font = \"15px Comic Sans MS\";\n        ctx.fillStyle = \"black\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(this.id, this.x, this.y);\n    }\n}","\nimport {Vertex} from './Vertex';\n\nexport class Graph{\n    constructor(height_canvas, width_canvas, directed){\n        this.auto_id = 0;\n        this.numNodes = 0;\n        this.nodesOn = {};\n        this.height = height_canvas;\n        this.width = width_canvas;\n        this.directed = directed;\n    }\n    addNode(x, y){\n        if(this.nodesOn[this.auto_id] === undefined){\n            this.nodesOn[this.auto_id] = new Vertex(this.auto_id, x, y);\n            this.auto_id++;\n            this.numNodes++;\n            return true;\n        }\n        return false;\n    }\n\n    addNeightNode(idFrom, idTo, weight){\n        this.nodesOn[idFrom].addNeight(idTo, weight);\n        if (!this.directed) this.nodesOn[idTo].addNeight(idFrom, weight);\n    }\n\n    removeNode(v_id){\n        // Eliminate any edge (track) of this vertex\n        for(const v in this.nodesOn){\n            if(this.nodesOn[v].numConnections > 0){\n                for(const n in this.nodesOn[v].connectTo){\n                    if(n === v_id) delete this.nodesOn[v].connectTo[n];\n                }\n            }\n        }\n        // Delete vertex of graph\n        this.nodesOn[v_id].connectTo = {}\n        delete this.nodesOn[v_id];\n        this.numNodes--;\n    }\n\n    redraw = (ctx) => {\n        let temporal = [];\n        let notRepeat = false;\n        ctx.clearRect(0, 0, this.width, this.height);\n        for(const v in this.nodesOn){\n            if(this.nodesOn[v].numConnections > 0){\n                for(const n in this.nodesOn[v].connectTo){\n                    if(temporal.length === 0){\n                        temporal.push((parseInt(n)+1)*(parseInt(v)+1));\n                    }else{\n                        for(let i of temporal){\n                            if (parseInt(i) === (parseInt(n)+1)*(parseInt(v)+1)) notRepeat = true;\n                        }\n                    }\n                    if(!notRepeat)\n                        this.nodesOn[v].drawEdge(ctx, this.nodesOn[n], this.directed, this.nodesOn[v].connectTo[n], false);\n                    notRepeat = false;\n                }\n            }\n            this.nodesOn[v].drawVertex(ctx);\n        }\n    };\n}","\nfunction Comparator(a, b){\n    if(a[2] < b[2]) return -1;\n    if(a[2] > b[2]) return 1;\n    return 0;\n}\n\nexport class Kruskals{\n    constructor(myGraph){\n        this.myGraph = myGraph;\n        this.numComponents = myGraph.numNodes;\n        this.solution = [];\n    }\n    find(p, arrRoot){\n        let root = p;\n        while(root !== arrRoot[root]){\n            root = arrRoot[root];\n        }\n\n        // path-compression\n        while(p !== root){\n            let next = arrRoot[p];\n            arrRoot[p] = root;\n            p = next;\n        }\n        return root;\n    }\n    union(p, q, arrRoot, arrSize){\n        let root1 = this.find(p, arrRoot);\n        let root2 = this.find(q, arrRoot);\n        if(root1 === root2) return false; // are in the same group\n        if(arrSize[root1] < arrSize[root2]){\n            arrSize[root2] += arrSize[root1];\n            arrRoot[root1] = parseInt(root2);\n        }else{\n            arrSize[root1] += arrSize[root2];\n            arrRoot[root2] = parseInt(root1);\n        }\n        this.numComponents--;\n        return true;\n    }\n    solve(){\n        let temporalArr = []\n        for(let u in this.myGraph.nodesOn){\n            for(let v in this.myGraph.nodesOn[u].connectTo){\n                let w = this.myGraph.nodesOn[u].connectTo[v];\n                let myTuple = [u,v,w];\n                temporalArr.push(myTuple);\n            }\n        }\n        temporalArr = temporalArr.sort(Comparator);\n        let arrSize = {};\n        let arrRoot = {};\n        let map = new Map(Object.entries(this.myGraph.nodesOn)); // for iterable object\n        for(let u of map){\n            arrSize[u[1].id] = 1;\n            arrRoot[u[1].id] = u[1].id;\n        }\n        let i = 0;\n        while(i<temporalArr.length){\n            let p = parseInt(temporalArr[i][0]);\n            let q = parseInt(temporalArr[i][1]);\n            if(this.union(p,q,arrRoot,arrSize)){\n                let w = parseInt(temporalArr[i][2]);\n                this.solution.push([p,q,w]);\n            }\n            i++;\n        }\n    }\n}","const INF = 1e9;\nconst debug = false;\nexport class PriorityQueue{\n    constructor(capacity){\n        this.capacity = capacity;\n        this.heap_size = 0;\n        this.triplete = {};\n        this.values = {};\n        this.pm = {};\n        this.idCount = 0;\n        this.im = new Array(capacity);\n        for (let i = 0; i < capacity; i++){\n            this.im[i] = INF;\n        }\n    }\n    poll(){\n        // copiar last element on position  0\n        // apply sink;\n        let id0 = this.im[0];\n        this.im[0] = this.im[this.heap_size-1];\n        this.pm[this.im[this.heap_size-1]] = 0;\n\n        this.values[id0] = INF;\n        this.im[this.heap_size-1] = INF;\n        this.pm[id0] = -1;\n\n        this.heap_size--;\n        this.sink(0);\n    }\n    sink(i){\n        while (true){\n            let left = this.leftChild(i);\n            let right = this.rightChild(i);\n            let smallest = left;\n            if(debug) console.log(i, this.im[i], \" - \",left, right, this.im[right], this.im[left]);\n            if(right <= this.heap_size-1 && this.values[this.im[right]] < this.values[this.im[left]]){\n                smallest = right;\n            }\n            if(smallest > this.heap_size-1 || this.values[this.im[smallest]] > this.values[this.im[i]]){\n                break;\n            }\n            this.swap(i, smallest);\n            i = smallest;\n        }\n    }\n    // up node i until hi is satisfied\n    swim(i){\n        while(this.parent(i) >= 0 && this.values[this.im[this.parent(i)]] > this.values[this.im[i]]){\n            this.swap(i, this.parent(i));\n            i = this.parent(i);\n        }\n    }\n    swap(i, down){\n        // swap values\n        this.pm[this.im[i]] = down;\n        this.pm[this.im[down]] = i;\n\n        let temp = this.im[i];\n        this.im[i] = this.im[down];\n        this.im[down] = temp;\n    }\n    insert(edgeObject){\n        if(this.heap_size === this.capacity){\n            // Crear new arr with double capacity\n            let t_im = this.im;\n            this.im = new Array(2*this.capacity);\n\n            for(let i = 0; i < this.capacity; i++){\n                this.im[i] = INF;\n            }\n\n            this.capacity = 2*this.capacity;\n            for(let i = 0; i < t_im.length; i++){\n                this.im[i] = t_im[i];\n            }\n        }\n        this.heap_size++;\n        let i = this.heap_size - 1;\n        if(debug) console.log(\"id, cost, i: \", this.idCount,\", \" ,edgeObject.cost, \", \", i);\n        this.values[this.idCount] = edgeObject.cost;\n        this.triplete[this.idCount] = edgeObject;\n        this.pm[this.idCount] = this.heap_size-1;\n        this.im[this.heap_size-1] = this.idCount;\n        this.idCount++;\n        this.swim(i);\n    }\n    empty(){return this.heap_size === 0;}\n    parent(i) {return ((i-1)/2)|0;}\n    leftChild(i){return (2*i+1);}\n    rightChild(i){return (2*i+2);}\n    front(){return {id: this.im[0], c: this.values[this.im[0]], e:this.triplete[this.im[0]]}}\n}","import { PriorityQueue } from \"../data-structure/PriorityQueue\";\n\nexport class Prims{\n    constructor(myGraph){\n        this.myGraph = myGraph;\n        this.n = myGraph.numNodes;\n        this.solution = [];\n        this.visited = {};\n        this.pq = new PriorityQueue(2*this.n);\n        let map = new Map(Object.entries(myGraph.nodesOn)); // for iterable object\n        for(let u of map){\n            this.visited[u[1].id] = false;\n        }\n        this.mstCost = 0;\n        this.mstEdges = [];\n        for(let i = 0; i<this.n; i++){\n            this.mstEdges.push(null);\n        }\n    }\n    addEdge(nodeIndex){\n        this.visited[nodeIndex] = true;\n        let edges = this.myGraph.nodesOn[nodeIndex].connectTo;\n        let map = new Map(Object.entries(edges));\n        for(let u of map){\n            let u_info = this.myGraph.nodesOn[u[0]];\n            if(!this.visited[u_info.id])\n                this.pq.insert({from: nodeIndex, to: u_info.id, cost: u[1]});\n        }\n    }\n    lazyPrims(s){\n        let m = this.n - 1;\n        let edgeCount = 0;\n        this.addEdge(s);\n        while(!this.pq.empty() && edgeCount !== m){\n            let edge = this.pq.front().e;\n            let nodeIndex = edge.to;\n            this.pq.poll();\n            if (this.visited[nodeIndex]) continue\n            this.mstEdges[edgeCount++] = edge;\n            this.mstCost += edge.cost;\n            this.solution.push([edge.from, edge.to, edge.cost]);\n            this.addEdge(nodeIndex);\n        }\n        if (edgeCount !== m)\n            return false;\n        return true;\n    }\n    solve(){\n        this.lazyPrims(this.myGraph.nodesOn[0].id);\n    }\n}","\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function removeNodeCanvas(fromId, myGraph){\n    if(fromId !== null && myGraph.nodesOn[fromId].selectMe){\n      myGraph.nodesOn[fromId].selectMe = false;\n      myGraph.removeNode(fromId);\n      return [myGraph, null, true];\n    }\n    return [myGraph, fromId, false];\n}\nexport function dragNodeCanvas(e, myGraph, fromId, dragMe){\n    let xPos = e.clientX;\n    let yPos = e.clientY;\n    if(fromId !== null && dragMe){\n        myGraph.nodesOn[fromId].x = xPos;\n        myGraph.nodesOn[fromId].y = yPos;\n        return [myGraph, true];\n    }\n    return [myGraph, false];\n}\n\nfunction closeVertex(myGraph, xPos, yPos){\n    // euclidean distance\n    let saveIdx = 0;\n    let minDist = 10e9;\n    for(const i in myGraph.nodesOn){\n        let dist = Math.pow(myGraph.nodesOn[i].x - xPos,2) + Math.pow(myGraph.nodesOn[i].y - yPos,2);\n        if(minDist > dist){\n            minDist = dist;\n            saveIdx = i;\n        }\n    }\n    return [minDist, saveIdx];\n}\n\nexport function AddOrSelect(e, myGraph, fromId, toId){\n    let xPos = e.clientX;\n    let yPos = e.clientY;\n    if(myGraph.numNodes === 0){\n        myGraph.addNode(xPos, yPos)\n    }else{\n        let [minDist, saveIdx] = closeVertex(myGraph, xPos, yPos);\n        if(minDist < 800 && !myGraph.nodesOn[saveIdx].selectMe){\n            myGraph.nodesOn[saveIdx].selectMe = true;\n            if(fromId === null){\n              fromId = saveIdx;\n            }else{\n              toId = saveIdx;\n              // Crear edge\n              myGraph.addNeightNode(fromId, toId, getRandomInt(-20, 20));\n              myGraph.nodesOn[fromId].selectMe = false;\n              myGraph.nodesOn[toId].selectMe = false;\n              fromId = null;\n              toId = null;\n            }\n          } // Unselect\n          else if (minDist < 800 && myGraph.nodesOn[saveIdx].selectMe){\n            myGraph.nodesOn[saveIdx].selectMe = false;\n            if(fromId === saveIdx){\n              myGraph.nodesOn[fromId].selectMe = false;\n              fromId = null;\n            }\n          }// Create a new Node\n          else{\n            myGraph.addNode(xPos, yPos);\n          }\n    }\n    return [myGraph, fromId, toId];\n}\n","import React, {useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Canvas.css\";\nimport {Graph} from './Graph';\nimport {Kruskals} from './algorithms/Kruskals';\nimport {Prims} from \"./algorithms/Prims\";\nimport {\n  removeNodeCanvas,\n  dragNodeCanvas,\n  AddOrSelect\n\n} from './useCanvas'\n\n// Return random number between min (include) y max (exclude)\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// unique id\nvar fromId = null;\nvar toId = null;\nvar dragMe = false;\n//var directedGraph = true;\n\nfunction MinSpaningTree({height, width}) {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    // update References\n    useEffect(()=>{\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      contextRef.current = context;\n    }, []);\n\n    var myGraph = new Graph(height, width, false);\n\n    let handleRemove = () => {\n      let makeChanges = false;\n      [myGraph, fromId, makeChanges] = removeNodeCanvas(fromId, myGraph);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let autoGraph = () =>{\n      removeGraph();\n      let n = getRandomInt(5, 9);\n      for(let i = 0; i < n; i++){\n        let x = getRandomInt(20, width-20);\n        let y = getRandomInt(20, height-20);\n        myGraph.addNode(x, y);\n      }\n      for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n          if(i !== j){\n            if(Math.random() >= .8)\n              myGraph.addNeightNode(i, j, getRandomInt(-20, 20));\n          }\n        }\n      }\n      myGraph.redraw(contextRef.current);\n    }\n\n    let removeGraph = () =>{\n      myGraph = new Graph(height, width, false);\n      myGraph.redraw(contextRef.current);\n    }\n\n    let clearAlgo = () =>{\n      myGraph.redraw(contextRef.current);\n    }\n\n    let handleClick = (e) =>{\n      e.preventDefault();\n      [myGraph, fromId, toId] = AddOrSelect(e, myGraph, fromId, toId);\n      myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseDown = (e) => {\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    // mobile\n    let handleTouchStart = (e) =>{\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleMouseMove = (e) =>{\n      e.preventDefault();\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(e, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    // mobile\n    let handleTouchMove = (e) =>{\n      let myE = {clientX:e.touches[0].clientX, clientY:e.touches[0].clientY};\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(myE, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseUp = (e) =>{\n      e.preventDefault();\n      dragMe = false;\n    }\n\n    // mobile\n    let handleTouchEnd = (e) =>{\n      dragMe = false;\n    }\n\n    let playModel = () =>{\n      let selectElement = document.getElementById(\"algorithms\");\n      let res;\n      if (selectElement.value === \"kruskal\"){\n        let inst = new Kruskals(myGraph);\n        inst.solve();\n        res = inst.solution;\n      }else{\n        let inst = new Prims(myGraph);\n        inst.solve();\n        res = inst.solution;\n      }\n      animationSolve(0, res);\n    }\n\n    function animationSolve(j, res){\n      if (j >= res.length) return;\n      // j no puede ser superior al tamano de res\n      let u = res[j][0];\n      let v = res[j][1];\n      let w = res[j][2];\n      // pintar edge u, v\n      myGraph.nodesOn[u].drawEdge(contextRef.current, myGraph.nodesOn[v], false, w, true);\n      // pintar u\n      myGraph.nodesOn[u].partOfSolution = true;\n      myGraph.nodesOn[u].drawVertex(contextRef.current);\n      // pintar v\n      myGraph.nodesOn[v].partOfSolution = true;\n      myGraph.nodesOn[v].drawVertex(contextRef.current);\n\n      myGraph.nodesOn[u].partOfSolution = false;\n      myGraph.nodesOn[v].partOfSolution = false;\n      setTimeout(()=>{\n        animationSolve(j+1, res);\n      }, 1000);\n    }\n\n\n\n    return (\n      <main>\n        <canvas\n          onClick={handleClick}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onTouchEnd={handleTouchEnd}\n          className=\"canvas\"\n          ref={canvasRef}\n          width={width}\n          height={height}\n          ></canvas>\n\n          <div id=\"control-panel\">\n            <div id=\"changeButtons\">\n              <button id=\"play\" onClick={playModel}>Solve</button>\n              <button id=\"removeMe\" onClick={handleRemove}>Remove Node</button>\n              <button id=\"Clear\" onClick={clearAlgo}>Clear Board</button>\n              <button id=\"drop\" onClick={removeGraph}>Drop Graph</button>\n              <button id=\"autograph\" onClick={autoGraph}>AutoGraph</button>\n            </div>\n            <div id=\"algorithms-topic\">\n              <h1>Select an algorithm for Minimum Spaning Tree: </h1>\n              <select id=\"algorithms\">\n                <option value=\"kruskal\">Kruskal's MST</option>\n                <option value=\"prim\">Prim's MST</option>\n              </select>\n            </div>\n        </div>\n      </main>\n    );\n  }\n  MinSpaningTree.propTypes = {\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n  };\nexport default MinSpaningTree;","import React, {useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Canvas.css\";\nimport {Graph} from './Graph';\nimport {\n  removeNodeCanvas,\n  dragNodeCanvas,\n  AddOrSelect\n\n} from './useCanvas'\n\n// unique id\nvar fromId = null;\nvar toId = null;\nvar dragMe = false;\n//var directedGraph = true;\n\nfunction TopologicalSorting({height, width}) {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    // update References\n    useEffect(()=>{\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      contextRef.current = context;\n    }, []);\n\n    var myGraph = new Graph(height, width, true);\n    let handleRemove = () => {\n      let makeChanges = false;\n      [myGraph, fromId, makeChanges] = removeNodeCanvas(fromId, myGraph);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleClick = (e) =>{\n      [myGraph, fromId, toId] = AddOrSelect(e, myGraph, fromId, toId);\n      myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseDown = (e) => {\n      //console.log(\"handleMouseDown\");\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleTouchStart = (e) =>{\n      //console.log(\"handleTouchStart\");\n    }\n\n    let handleMouseMove = (e) =>{\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(e, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseUp = (e) =>{\n      //console.log(\"handleMouseUp\");\n      dragMe = false;\n    }\n\n    let handleTouchEnd = (e) =>{\n      //console.log(\"handleTouchEnd\");\n    }\n\n    return (\n      <main>\n        <canvas\n          onClick={handleClick}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onTouchEnd={handleTouchEnd}\n          className=\"canvas\"\n          ref={canvasRef}\n          width={width}\n          height={height}\n          ></canvas>\n\n          <div id=\"control-panel\">\n          <div id=\"changeButtons\">\n            <button id=\"removeMe\" onClick={handleRemove}>Remove Node</button>\n            <button id=\"autograph\">AutoGraph</button>\n            </div>\n          <div id=\"algorithms-topic\">\n            <h1>Select an algorithm for find the TopologicalSorting: </h1>\n            <select>\n              <option>Kahn Algorithm</option>\n              <option>Classic DFS</option>\n            </select>\n          </div>\n        </div>\n      </main>\n    );\n  }\n  TopologicalSorting.propTypes = {\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n  };\nexport default TopologicalSorting;","import React from 'react';\nimport MinSpaningTree from './components/MinSpaningTree';\nimport TopologicalSorting from './components/TopologicalSorting';\nimport \"./App.css\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  let myWidth = window.innerWidth;\n  return (\n    <Router>\n      <main>\n          <Switch>\n            <Route exact path=\"/graph-solutions/\"><MinSpaningTree width={myWidth} height={400}></MinSpaningTree></Route>\n            <Route exact path=\"/graph-solutions/topo\"><TopologicalSorting width={myWidth} height={400}></TopologicalSorting></Route>\n            <Route exact path=\"/graph-solutions/\"><MinSpaningTree width={myWidth} height={400}></MinSpaningTree></Route>\n            <Route exact path=\"/graph-solutions/topo\"><TopologicalSorting width={myWidth} height={400}></TopologicalSorting></Route>\n          </Switch>\n      </main>\n      <div id=\"switcher\">\n        <div><Link to=\"/graph-solutions/\">Minimum Spaning Tree</Link></div>\n        <div><Link to=\"/graph-solutions/topo\">Topological Sorting</Link></div>\n        <div><Link to=\"/graph-solutions/\">Strongly Connected Components</Link></div>\n        <div><Link to=\"/graph-solutions/topo\">MaxFlow</Link></div>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}