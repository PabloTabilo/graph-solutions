{"version":3,"sources":["components/Vertex.js","components/Graph.js","components/useCanvas.js","components/MinSpaningTree.js","components/TopologicalSorting.js","App.jsx","index.js"],"names":["Vertex","id","x","y","this","connectTo","selectMe","numConnections","idTo","weight","context","vertexTo","directed","strokeStyle","lineWidth","beginPath","fromx","fromy","tox","toy","moveTo","dx","dy","angle","Math","atan2","sin","cos","lineTo","PI","stroke","ctx","arc","fillStyle","fill","Graph","height_canvas","width_canvas","redraw","v","clearRect","width","height","nodesOn","n","drawEdge","drawVertex","auto_id","numNodes","undefined","idFrom","addNeight","v_id","removeNodeCanvas","fromId","myGraph","removeNode","dragNodeCanvas","e","dragMe","xPos","clientX","yPos","clientY","AddOrSelect","toId","addNode","saveIdx","minDist","i","dist","pow","closeVertex","addNeightNode","MinSpaningTree","canvasRef","useRef","contextRef","useEffect","current","getContext","onClick","onMouseDown","onTouchStart","console","log","onTouchMove","touches","onMouseMove","onMouseUp","onTouchEnd","className","ref","TopologicalSorting","App","myWidth","window","innerWidth","exact","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a9dea61.chunk.js","sourcesContent":["\nexport class Vertex{\n    constructor(id, x, y){\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.connectTo = {};\n        this.selectMe = false;\n\n        this.numConnections = 0;\n    }\n    addNeight(idTo, weight=0){\n        this.connectTo[idTo] = weight;\n        this.numConnections++;\n    }\n    removeNeight(id){\n        delete(this.connectTo[id]);\n        this.numConnections--;\n    }\n    drawEdge(context, vertexTo, directed){\n        context.strokeStyle = \"black\";\n        context.lineWidth = 1;\n        context.beginPath();\n        let fromx = this.x;\n        let fromy = this.y;\n        let tox = vertexTo.x;\n        let toy = vertexTo.y;\n        context.moveTo(fromx, fromy);\n\n        let dx = tox - this.x;\n        let dy = toy - this.y;\n        let angle = Math.atan2(dy, dx);\n\n        let pad = 20; // like radius\n        let y = toy - Math.sin(angle) * pad;\n        let x = tox - Math.cos(angle) * pad;\n\n        context.lineTo(x, y);\n        if(directed){\n            let headlen = 15; // length head pixels\n\n            context.moveTo(x, y);\n            context.lineTo(x - headlen * Math.cos(angle - Math.PI / 6), y - headlen * Math.sin(angle - Math.PI / 6));\n            context.moveTo(x, y);\n            context.lineTo(x - headlen * Math.cos(angle + Math.PI / 6), y - headlen * Math.sin(angle + Math.PI / 6));\n        }\n        context.stroke();\n    }\n    drawVertex(ctx){\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, 20, 0, 2 * Math.PI);\n        if(this.selectMe){\n            ctx.fillStyle = \"orange\";\n        }else{\n            ctx.fillStyle = \"white\";\n        }\n        ctx.fill();\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"black\";\n        ctx.stroke();\n    }\n}","\nimport {Vertex} from './Vertex';\n\nexport class Graph{\n    constructor(height_canvas, width_canvas, directed){\n        this.auto_id = 0;\n        this.numNodes = 0;\n        this.nodesOn = {};\n        this.height = height_canvas;\n        this.width = width_canvas;\n        this.directed = directed;\n    }\n    addNode(x, y){\n        if(this.nodesOn[this.auto_id] === undefined){\n            this.nodesOn[this.auto_id] = new Vertex(this.auto_id, x, y);\n            this.auto_id++;\n            this.numNodes++;\n            return true;\n        }\n        return false;\n    }\n\n    addNeightNode(idFrom, idTo, weight){\n        this.nodesOn[idFrom].addNeight(idTo, weight);\n        if (!this.directed) this.nodesOn[idTo].addNeight(idFrom, weight);\n    }\n\n    removeNode(v_id){\n        // Eliminate any edge (track) of this vertex\n        for(const v in this.nodesOn){\n            if(this.nodesOn[v].numConnections > 0){\n                for(const n in this.nodesOn[v].connectTo){\n                    if(n === v_id) delete this.nodesOn[v].connectTo[n];\n                }\n            }\n        }\n        // Delete vertex of graph\n        this.nodesOn[v_id].connectTo = {}\n        delete this.nodesOn[v_id];\n        this.numNodes--;\n    }\n\n    redraw = (ctx) => {\n        ctx.clearRect(0, 0, this.width, this.height);\n        for(const v in this.nodesOn){\n            if(this.nodesOn[v].numConnections > 0){\n                for(const n in this.nodesOn[v].connectTo){\n                    this.nodesOn[v].drawEdge(ctx, this.nodesOn[n], this.directed);\n                }\n            }\n            this.nodesOn[v].drawVertex(ctx);\n        }\n    };\n}","export function removeNodeCanvas(fromId, myGraph){\n    if(fromId !== null && myGraph.nodesOn[fromId].selectMe){\n      myGraph.nodesOn[fromId].selectMe = false;\n      myGraph.removeNode(fromId);\n      return [myGraph, null, true];\n    }\n    return [myGraph, fromId, false];\n}\nexport function dragNodeCanvas(e, myGraph, fromId, dragMe){\n    let xPos = e.clientX;\n    let yPos = e.clientY;\n    if(fromId !== null && dragMe){\n        myGraph.nodesOn[fromId].x = xPos;\n        myGraph.nodesOn[fromId].y = yPos;\n        return [myGraph, true];\n    }\n    return [myGraph, false];\n}\n\nfunction closeVertex(myGraph, xPos, yPos){\n    // euclidean distance\n    let saveIdx = 0;\n    let minDist = 10e9;\n    for(const i in myGraph.nodesOn){\n        let dist = Math.pow(myGraph.nodesOn[i].x - xPos,2) + Math.pow(myGraph.nodesOn[i].y - yPos,2);\n        if(minDist > dist){\n            minDist = dist;\n            saveIdx = i;\n        }\n    }\n    return [minDist, saveIdx];\n}\n\nexport function AddOrSelect(e, myGraph, fromId, toId){\n    let xPos = e.clientX;\n    let yPos = e.clientY;\n    if(myGraph.numNodes === 0){\n        myGraph.addNode(xPos, yPos)\n    }else{\n        let [minDist, saveIdx] = closeVertex(myGraph, xPos, yPos);\n        if(minDist < 800 && !myGraph.nodesOn[saveIdx].selectMe){\n            myGraph.nodesOn[saveIdx].selectMe = true;\n            if(fromId === null){\n              fromId = saveIdx;\n            }else{\n              toId = saveIdx;\n              // Crear edge\n              myGraph.addNeightNode(fromId, toId, 1);\n              myGraph.nodesOn[fromId].selectMe = false;\n              myGraph.nodesOn[toId].selectMe = false;\n              fromId = null;\n              toId = null;\n            }\n          } // Unselect\n          else if (minDist < 800 && myGraph.nodesOn[saveIdx].selectMe){\n            myGraph.nodesOn[saveIdx].selectMe = false;\n            if(fromId === saveIdx){\n              myGraph.nodesOn[fromId].selectMe = false;\n              fromId = null;\n            }\n          }// Create a new Node\n          else{\n            myGraph.addNode(xPos, yPos);\n          }\n    }\n    return [myGraph, fromId, toId];\n}\n","import React, {useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Canvas.css\";\nimport {Graph} from './Graph';\nimport {\n  removeNodeCanvas,\n  dragNodeCanvas,\n  AddOrSelect\n\n} from './useCanvas'\n\n// unique id\nvar fromId = null;\nvar toId = null;\nvar dragMe = false;\n//var directedGraph = true;\n\nfunction MinSpaningTree({height, width}) {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    // update References\n    useEffect(()=>{\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      contextRef.current = context;\n    }, []);\n\n    var myGraph = new Graph(height, width, false);\n    let handleRemove = () => {\n      let makeChanges = false;\n      [myGraph, fromId, makeChanges] = removeNodeCanvas(fromId, myGraph);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleClick = (e) =>{\n      [myGraph, fromId, toId] = AddOrSelect(e, myGraph, fromId, toId);\n      myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseDown = (e) => {\n      //console.log(\"handleMouseDown\");\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleTouchStart = (e) =>{\n      console.log(\"handleTouchStart\");\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleMouseMove = (e) =>{\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(e, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleTouchMove = (e) =>{\n      let myE = {clientX:e.touches[0].clientX, clientY:e.touches[0].clientY};\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(myE, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseUp = (e) =>{\n      //console.log(\"handleMouseUp\");\n      dragMe = false;\n    }\n\n    let handleTouchEnd = (e) =>{\n      console.log(\"handleTouchEnd\");\n      dragMe = false;\n    }\n\n    return (\n      <main>\n        <canvas\n          onClick={handleClick}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onTouchEnd={handleTouchEnd}\n          className=\"canvas\"\n          ref={canvasRef}\n          width={width}\n          height={height}\n          ></canvas>\n\n          <div id=\"control-panel\">\n          <div id=\"changeButtons\">\n            <button id=\"removeMe\" onClick={handleRemove}>Remove Node</button>\n            <button id=\"autograph\">AutoGraph</button>\n            </div>\n          <div id=\"algorithms-topic\">\n            <h1>Select an algorithm for find the minimum spaning Tree: </h1>\n            <select>\n              <option>Kruskal's MST</option>\n              <option>Prim's MST</option>\n            </select>\n          </div>\n        </div>\n      </main>\n    );\n  }\n  MinSpaningTree.propTypes = {\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n  };\nexport default MinSpaningTree;","import React, {useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Canvas.css\";\nimport {Graph} from './Graph';\nimport {\n  removeNodeCanvas,\n  dragNodeCanvas,\n  AddOrSelect\n\n} from './useCanvas'\n\n// unique id\nvar fromId = null;\nvar toId = null;\nvar dragMe = false;\n//var directedGraph = true;\n\nfunction TopologicalSorting({height, width}) {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    // update References\n    useEffect(()=>{\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      contextRef.current = context;\n    }, []);\n\n    var myGraph = new Graph(height, width, true);\n    let handleRemove = () => {\n      let makeChanges = false;\n      [myGraph, fromId, makeChanges] = removeNodeCanvas(fromId, myGraph);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleClick = (e) =>{\n      [myGraph, fromId, toId] = AddOrSelect(e, myGraph, fromId, toId);\n      myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseDown = (e) => {\n      //console.log(\"handleMouseDown\");\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleTouchStart = (e) =>{\n      //console.log(\"handleTouchStart\");\n    }\n\n    let handleMouseMove = (e) =>{\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(e, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseUp = (e) =>{\n      //console.log(\"handleMouseUp\");\n      dragMe = false;\n    }\n\n    let handleTouchEnd = (e) =>{\n      //console.log(\"handleTouchEnd\");\n    }\n\n    return (\n      <main>\n        <canvas\n          onClick={handleClick}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onTouchEnd={handleTouchEnd}\n          className=\"canvas\"\n          ref={canvasRef}\n          width={width}\n          height={height}\n          ></canvas>\n\n          <div id=\"control-panel\">\n          <div id=\"changeButtons\">\n            <button id=\"removeMe\" onClick={handleRemove}>Remove Node</button>\n            <button id=\"autograph\">AutoGraph</button>\n            </div>\n          <div id=\"algorithms-topic\">\n            <h1>Select an algorithm for find the TopologicalSorting: </h1>\n            <select>\n              <option>Kahn Algorithm</option>\n              <option>Classic DFS</option>\n            </select>\n          </div>\n        </div>\n      </main>\n    );\n  }\n  TopologicalSorting.propTypes = {\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n  };\nexport default TopologicalSorting;","import React from 'react';\nimport MinSpaningTree from './components/MinSpaningTree';\nimport TopologicalSorting from './components/TopologicalSorting';\nimport \"./App.css\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  let myWidth = window.innerWidth;\n  return (\n    <Router>\n      <main>\n        <Switch>\n          <Route exact path=\"/graph-solutions/\"><MinSpaningTree width={myWidth} height={400}></MinSpaningTree></Route>\n          <Route exact path=\"/graph-solutions/topo\"><TopologicalSorting width={myWidth} height={400}></TopologicalSorting></Route>\n        </Switch>\n      </main>\n      <div>\n        <Link to=\"/graph-solutions/\">MST</Link>\n        <Link to=\"/graph-solutions/topo\">TopologicalSorting</Link>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}