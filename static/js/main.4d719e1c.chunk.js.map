{"version":3,"sources":["components/Vertex.js","components/Graph.js","components/algorithms/Kruskals.js","components/useCanvas.js","components/MinSpaningTree.js","components/TopologicalSorting.js","App.jsx","index.js"],"names":["Vertex","id","x","y","this","connectTo","selectMe","partOfSolution","numConnections","idTo","weight","context","vertexTo","directed","partOfSolEdge","strokeStyle","lineWidth","beginPath","fromx","fromy","tox","toy","moveTo","dx","dy","angle","Math","atan2","sin","cos","lineTo","PI","stroke","font","fillStyle","textAlign","fillText","ctx","arc","fill","Graph","height_canvas","width_canvas","redraw","temporal","notRepeat","v","clearRect","width","height","nodesOn","n","length","push","parseInt","i","drawEdge","drawVertex","auto_id","numNodes","undefined","idFrom","addNeight","v_id","Comparator","a","b","Kruskals","myGraph","numComponents","solution","p","arrRoot","root","next","q","arrSize","root1","find","root2","temporalArr","u","myTuple","sort","map","Map","Object","entries","union","w","removeNodeCanvas","fromId","removeNode","dragNodeCanvas","e","dragMe","xPos","clientX","yPos","clientY","AddOrSelect","toId","min","max","addNode","saveIdx","minDist","dist","pow","closeVertex","addNeightNode","floor","random","MinSpaningTree","canvasRef","useRef","contextRef","useEffect","current","getContext","animationSolve","j","res","setTimeout","onClick","preventDefault","onMouseDown","onTouchStart","console","log","onTouchMove","touches","onMouseMove","onMouseUp","onTouchEnd","className","ref","inst","solve","TopologicalSorting","App","myWidth","window","innerWidth","exact","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d719e1c.chunk.js","sourcesContent":["\nexport class Vertex{\n    constructor(id, x, y){\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.connectTo = {};\n        this.selectMe = false;\n        this.partOfSolution = false;\n        this.numConnections = 0;\n    }\n    addNeight(idTo, weight=0){\n        this.connectTo[idTo] = weight;\n        this.numConnections++;\n    }\n    removeNeight(id){\n        delete(this.connectTo[id]);\n        this.numConnections--;\n    }\n    drawEdge(context, vertexTo, directed, weight, partOfSolEdge){\n        if(partOfSolEdge){\n            context.strokeStyle = \"orange\";\n            context.lineWidth = 5;\n        }\n        else{\n            context.lineWidth = 1;\n            context.strokeStyle = \"black\";\n        }\n        context.beginPath();\n        let fromx = this.x;\n        let fromy = this.y;\n        let tox = vertexTo.x;\n        let toy = vertexTo.y;\n        context.moveTo(fromx, fromy);\n\n        let dx = tox - this.x;\n        let dy = toy - this.y;\n        let angle = Math.atan2(dy, dx);\n\n        let pad = 20; // like radius\n        let y = toy - Math.sin(angle) * pad;\n        let x = tox - Math.cos(angle) * pad;\n\n        context.lineTo(x, y);\n        if(directed){\n            let headlen = 15; // length head pixels\n\n            context.moveTo(x, y);\n            context.lineTo(x - headlen * Math.cos(angle - Math.PI / 6), y - headlen * Math.sin(angle - Math.PI / 6));\n            context.moveTo(x, y);\n            context.lineTo(x - headlen * Math.cos(angle + Math.PI / 6), y - headlen * Math.sin(angle + Math.PI / 6));\n        }\n        context.stroke();\n        context.font = \"25px Comic Sans MS\";\n        if(partOfSolEdge){\n            context.fillStyle = \"red\";\n        }else{\n            context.fillStyle = \"gray\";\n        }\n        context.textAlign = \"center\";\n        context.fillText(weight, (fromx+tox)/2, (fromy+toy)/2);\n    }\n    drawVertex(ctx){\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, 20, 0, 2 * Math.PI);\n        if(this.selectMe){\n            ctx.fillStyle = \"orange\";\n        }else{\n            ctx.fillStyle = \"white\";\n        }\n        if(this.partOfSolution){\n            ctx.fillStyle = \"orange\";\n        }\n        ctx.fill();\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"black\";\n        ctx.stroke();\n        ctx.font = \"15px Comic Sans MS\";\n        ctx.fillStyle = \"black\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(this.id, this.x, this.y);\n    }\n}","\nimport {Vertex} from './Vertex';\n\nexport class Graph{\n    constructor(height_canvas, width_canvas, directed){\n        this.auto_id = 0;\n        this.numNodes = 0;\n        this.nodesOn = {};\n        this.height = height_canvas;\n        this.width = width_canvas;\n        this.directed = directed;\n    }\n    addNode(x, y){\n        if(this.nodesOn[this.auto_id] === undefined){\n            this.nodesOn[this.auto_id] = new Vertex(this.auto_id, x, y);\n            this.auto_id++;\n            this.numNodes++;\n            return true;\n        }\n        return false;\n    }\n\n    addNeightNode(idFrom, idTo, weight){\n        this.nodesOn[idFrom].addNeight(idTo, weight);\n        if (!this.directed) this.nodesOn[idTo].addNeight(idFrom, weight);\n    }\n\n    removeNode(v_id){\n        // Eliminate any edge (track) of this vertex\n        for(const v in this.nodesOn){\n            if(this.nodesOn[v].numConnections > 0){\n                for(const n in this.nodesOn[v].connectTo){\n                    if(n === v_id) delete this.nodesOn[v].connectTo[n];\n                }\n            }\n        }\n        // Delete vertex of graph\n        this.nodesOn[v_id].connectTo = {}\n        delete this.nodesOn[v_id];\n        this.numNodes--;\n    }\n\n    redraw = (ctx) => {\n        let temporal = [];\n        let notRepeat = false;\n        ctx.clearRect(0, 0, this.width, this.height);\n        for(const v in this.nodesOn){\n            if(this.nodesOn[v].numConnections > 0){\n                for(const n in this.nodesOn[v].connectTo){\n                    if(temporal.length === 0){\n                        temporal.push((parseInt(n)+1)*(parseInt(v)+1));\n                    }else{\n                        for(let i of temporal){\n                            if (parseInt(i) === (parseInt(n)+1)*(parseInt(v)+1)) notRepeat = true;\n                        }\n                    }\n                    if(!notRepeat)\n                        this.nodesOn[v].drawEdge(ctx, this.nodesOn[n], this.directed, this.nodesOn[v].connectTo[n], false);\n                    notRepeat = false;\n                }\n            }\n            this.nodesOn[v].drawVertex(ctx);\n        }\n    };\n}","\nfunction Comparator(a, b){\n    if(a[2] < b[2]) return -1;\n    if(a[2] > b[2]) return 1;\n    return 0;\n}\n\nexport class Kruskals{\n    constructor(myGraph){\n        this.myGraph = myGraph;\n        this.numComponents = myGraph.numNodes;\n        this.solution = [];\n    }\n    find(p, arrRoot){\n        let root = p;\n        while(root !== arrRoot[root]){\n            root = arrRoot[root];\n        }\n\n        // path-compression\n        while(p !== root){\n            let next = arrRoot[p];\n            arrRoot[p] = root;\n            p = next;\n        }\n        return root;\n    }\n    union(p, q, arrRoot, arrSize){\n        let root1 = this.find(p, arrRoot);\n        let root2 = this.find(q, arrRoot);\n        if(root1 === root2) return false; // are in the same group\n        if(arrSize[root1] < arrSize[root2]){\n            arrSize[root2] += arrSize[root1];\n            arrRoot[root1] = parseInt(root2);\n        }else{\n            arrSize[root1] += arrSize[root2];\n            arrRoot[root2] = parseInt(root1);\n        }\n        this.numComponents--;\n        return true;\n    }\n    solve(){\n        let temporalArr = []\n        for(let u in this.myGraph.nodesOn){\n            for(let v in this.myGraph.nodesOn[u].connectTo){\n                let w = this.myGraph.nodesOn[u].connectTo[v];\n                let myTuple = [u,v,w];\n                temporalArr.push(myTuple);\n            }\n        }\n        temporalArr = temporalArr.sort(Comparator);\n        let arrSize = {};\n        let arrRoot = {};\n        let map = new Map(Object.entries(this.myGraph.nodesOn)); // for iterable object\n        for(let u of map){\n            arrSize[u[1].id] = 1;\n            arrRoot[u[1].id] = u[1].id;\n        }\n        let i = 0;\n        while(i<temporalArr.length){\n            let p = parseInt(temporalArr[i][0]);\n            let q = parseInt(temporalArr[i][1]);\n            if(this.union(p,q,arrRoot,arrSize)){\n                let w = parseInt(temporalArr[i][2]);\n                this.solution.push([p,q,w]);\n            }\n            i++;\n        }\n    }\n}","\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nexport function removeNodeCanvas(fromId, myGraph){\n    if(fromId !== null && myGraph.nodesOn[fromId].selectMe){\n      myGraph.nodesOn[fromId].selectMe = false;\n      myGraph.removeNode(fromId);\n      return [myGraph, null, true];\n    }\n    return [myGraph, fromId, false];\n}\nexport function dragNodeCanvas(e, myGraph, fromId, dragMe){\n    let xPos = e.clientX;\n    let yPos = e.clientY;\n    if(fromId !== null && dragMe){\n        myGraph.nodesOn[fromId].x = xPos;\n        myGraph.nodesOn[fromId].y = yPos;\n        return [myGraph, true];\n    }\n    return [myGraph, false];\n}\n\nfunction closeVertex(myGraph, xPos, yPos){\n    // euclidean distance\n    let saveIdx = 0;\n    let minDist = 10e9;\n    for(const i in myGraph.nodesOn){\n        let dist = Math.pow(myGraph.nodesOn[i].x - xPos,2) + Math.pow(myGraph.nodesOn[i].y - yPos,2);\n        if(minDist > dist){\n            minDist = dist;\n            saveIdx = i;\n        }\n    }\n    return [minDist, saveIdx];\n}\n\nexport function AddOrSelect(e, myGraph, fromId, toId){\n    let xPos = e.clientX;\n    let yPos = e.clientY;\n    if(myGraph.numNodes === 0){\n        myGraph.addNode(xPos, yPos)\n    }else{\n        let [minDist, saveIdx] = closeVertex(myGraph, xPos, yPos);\n        if(minDist < 800 && !myGraph.nodesOn[saveIdx].selectMe){\n            myGraph.nodesOn[saveIdx].selectMe = true;\n            if(fromId === null){\n              fromId = saveIdx;\n            }else{\n              toId = saveIdx;\n              // Crear edge\n              myGraph.addNeightNode(fromId, toId, getRandomInt(-20, 20));\n              myGraph.nodesOn[fromId].selectMe = false;\n              myGraph.nodesOn[toId].selectMe = false;\n              fromId = null;\n              toId = null;\n            }\n          } // Unselect\n          else if (minDist < 800 && myGraph.nodesOn[saveIdx].selectMe){\n            myGraph.nodesOn[saveIdx].selectMe = false;\n            if(fromId === saveIdx){\n              myGraph.nodesOn[fromId].selectMe = false;\n              fromId = null;\n            }\n          }// Create a new Node\n          else{\n            myGraph.addNode(xPos, yPos);\n          }\n    }\n    return [myGraph, fromId, toId];\n}\n","import React, {useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Canvas.css\";\nimport {Graph} from './Graph';\nimport {Kruskals} from './algorithms/Kruskals';\nimport {\n  removeNodeCanvas,\n  dragNodeCanvas,\n  AddOrSelect\n\n} from './useCanvas'\n\n// unique id\nvar fromId = null;\nvar toId = null;\nvar dragMe = false;\n//var directedGraph = true;\n\nfunction MinSpaningTree({height, width}) {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    // update References\n    useEffect(()=>{\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      contextRef.current = context;\n    }, []);\n\n    var myGraph = new Graph(height, width, false);\n    let handleRemove = () => {\n      let makeChanges = false;\n      [myGraph, fromId, makeChanges] = removeNodeCanvas(fromId, myGraph);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleClick = (e) =>{\n      e.preventDefault();\n      [myGraph, fromId, toId] = AddOrSelect(e, myGraph, fromId, toId);\n      myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseDown = (e) => {\n      //console.log(\"handleMouseDown\");\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleTouchStart = (e) =>{\n      console.log(\"handleTouchStart\");\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleMouseMove = (e) =>{\n      e.preventDefault();\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(e, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleTouchMove = (e) =>{\n      let myE = {clientX:e.touches[0].clientX, clientY:e.touches[0].clientY};\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(myE, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseUp = (e) =>{\n      e.preventDefault();\n      //console.log(\"handleMouseUp\");\n      dragMe = false;\n    }\n\n    let handleTouchEnd = (e) =>{\n      console.log(\"handleTouchEnd\");\n      dragMe = false;\n    }\n\n    let playModel = () =>{\n      let inst = new Kruskals(myGraph);\n      inst.solve();\n      let res = inst.solution;\n      animationSolve(0, res);\n    }\n\n    function animationSolve(j, res){\n      if (j >= res.length) return;\n      // j no puede ser superior al tamano de res\n      let u = res[j][0];\n      let v = res[j][1];\n      let w = res[j][2];\n      // pintar edge u, v\n      myGraph.nodesOn[u].drawEdge(contextRef.current, myGraph.nodesOn[v], false, w, true);\n      // pintar u\n      myGraph.nodesOn[u].partOfSolution = true;\n      myGraph.nodesOn[u].drawVertex(contextRef.current);\n      // pintar v\n      myGraph.nodesOn[v].partOfSolution = true;\n      myGraph.nodesOn[v].drawVertex(contextRef.current);\n\n      myGraph.nodesOn[u].partOfSolution = false;\n      myGraph.nodesOn[v].partOfSolution = false;\n      setTimeout(()=>{\n        animationSolve(j+1, res);\n      }, 1000);\n    }\n\n    return (\n      <main>\n        <canvas\n          onClick={handleClick}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onTouchEnd={handleTouchEnd}\n          className=\"canvas\"\n          ref={canvasRef}\n          width={width}\n          height={height}\n          ></canvas>\n\n          <div id=\"control-panel\">\n            <div id=\"changeButtons\">\n              <button id=\"play\" onClick={playModel}>Solve</button>\n              <button id=\"removeMe\" onClick={handleRemove}>Remove Node</button>\n              <button id=\"Clear\">Clear Board</button>\n              <button id=\"autograph\">AutoGraph</button>\n            </div>\n            <div id=\"algorithms-topic\">\n              <h1>Select an algorithm for Minimum Spaning Tree: </h1>\n              <select>\n                <option>Kruskal's MST</option>\n                <option>Prim's MST</option>\n              </select>\n            </div>\n        </div>\n      </main>\n    );\n  }\n  MinSpaningTree.propTypes = {\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n  };\nexport default MinSpaningTree;","import React, {useRef, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Canvas.css\";\nimport {Graph} from './Graph';\nimport {\n  removeNodeCanvas,\n  dragNodeCanvas,\n  AddOrSelect\n\n} from './useCanvas'\n\n// unique id\nvar fromId = null;\nvar toId = null;\nvar dragMe = false;\n//var directedGraph = true;\n\nfunction TopologicalSorting({height, width}) {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n\n    // update References\n    useEffect(()=>{\n      const canvas = canvasRef.current;\n      const context = canvas.getContext('2d');\n      contextRef.current = context;\n    }, []);\n\n    var myGraph = new Graph(height, width, true);\n    let handleRemove = () => {\n      let makeChanges = false;\n      [myGraph, fromId, makeChanges] = removeNodeCanvas(fromId, myGraph);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleClick = (e) =>{\n      [myGraph, fromId, toId] = AddOrSelect(e, myGraph, fromId, toId);\n      myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseDown = (e) => {\n      //console.log(\"handleMouseDown\");\n      if(fromId !== null){\n        dragMe = true;\n      }\n    }\n\n    let handleTouchStart = (e) =>{\n      //console.log(\"handleTouchStart\");\n    }\n\n    let handleMouseMove = (e) =>{\n      let makeChanges = false;\n      [myGraph, makeChanges] = dragNodeCanvas(e, myGraph, fromId, dragMe);\n      if (makeChanges) myGraph.redraw(contextRef.current);\n    }\n\n    let handleMouseUp = (e) =>{\n      //console.log(\"handleMouseUp\");\n      dragMe = false;\n    }\n\n    let handleTouchEnd = (e) =>{\n      //console.log(\"handleTouchEnd\");\n    }\n\n    return (\n      <main>\n        <canvas\n          onClick={handleClick}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          onMouseMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onTouchEnd={handleTouchEnd}\n          className=\"canvas\"\n          ref={canvasRef}\n          width={width}\n          height={height}\n          ></canvas>\n\n          <div id=\"control-panel\">\n          <div id=\"changeButtons\">\n            <button id=\"removeMe\" onClick={handleRemove}>Remove Node</button>\n            <button id=\"autograph\">AutoGraph</button>\n            </div>\n          <div id=\"algorithms-topic\">\n            <h1>Select an algorithm for find the TopologicalSorting: </h1>\n            <select>\n              <option>Kahn Algorithm</option>\n              <option>Classic DFS</option>\n            </select>\n          </div>\n        </div>\n      </main>\n    );\n  }\n  TopologicalSorting.propTypes = {\n      height: PropTypes.number.isRequired,\n      width: PropTypes.number.isRequired,\n  };\nexport default TopologicalSorting;","import React from 'react';\nimport MinSpaningTree from './components/MinSpaningTree';\nimport TopologicalSorting from './components/TopologicalSorting';\nimport \"./App.css\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  let myWidth = window.innerWidth;\n  return (\n    <Router>\n      <main>\n          <Switch>\n            <Route exact path=\"/graph-solutions/\"><MinSpaningTree width={myWidth} height={400}></MinSpaningTree></Route>\n            <Route exact path=\"/graph-solutions/topo\"><TopologicalSorting width={myWidth} height={400}></TopologicalSorting></Route>\n            <Route exact path=\"/graph-solutions/\"><MinSpaningTree width={myWidth} height={400}></MinSpaningTree></Route>\n            <Route exact path=\"/graph-solutions/topo\"><TopologicalSorting width={myWidth} height={400}></TopologicalSorting></Route>\n          </Switch>\n      </main>\n      <div id=\"switcher\">\n        <div><Link to=\"/graph-solutions/\">Minimum Spaning Tree</Link></div>\n        <div><Link to=\"/graph-solutions/topo\">Topological Sorting</Link></div>\n        <div><Link to=\"/graph-solutions/\">Strongly Connected Components</Link></div>\n        <div><Link to=\"/graph-solutions/topo\">MaxFlow</Link></div>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}